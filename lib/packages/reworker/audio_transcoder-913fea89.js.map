{"version":3,"file":"audio_transcoder-913fea89.js","sources":["../src/worker/audio_transcoder.ts"],"sourcesContent":["// import { AUDIO_STREAM_TYPE } from \"./pull_demuxer_base.js\";\n// import { RingBuffer } from \"../third_party/ringbufjs/ringbuf.js\";\n\n// const DATA_BUFFER_DECODE_TARGET_DURATION = 0.3;\n// const DATA_BUFFER_DURATION = 0.6;\n// const DECODER_QUEUE_SIZE_MAX = 5;\n\nimport { MP4PullDemuxer } from '../tool/mp4_demuxer';\nimport { WebmMuxer } from '../tool/webm_muxer';\nimport { SampleLock } from '../tool/SampleLock'\nimport  {AUDIO_STREAM_TYPE, ENCODER_QUEUE_SIZE_MAX, debugLog} from '../tool/type'\n\n//importScripts在ts环境中不适用，因此先注释，看看会出什么问题再解决\n// self.importScripts('../external-js/mp4box.all.min.js');\n\n\nvar frameCount = 0;\nvar chunkCount = 0;\nvar rechunkCount = 0;\n\nlet audioTranscoder: AudioTranscoder|undefined;\n\nonmessage = async function (e) {\n  const msg = e.data;\n  console.log('in audio data message...')\n  if(!audioTranscoder)\n    audioTranscoder = new AudioTranscoder();\n  switch (msg.type) {\n    case 'initialize':\n      console.log('audio transcoder: case initialize is triggered');\n      // let demuxer = await import('../tool/mp4_demuxer');\n      let audioDemuxer =  new MP4PullDemuxer();\n      // console.log('finish audioDemuxer');\n      let muxer = new WebmMuxer();\n      //这里可能要重写\n      //将提取出几个config的方法单独挪出来，直接将config传入initialize\n      console.log('audio_worker: waiting for encodeconfig')\n      const encodeconfig = await audioTranscoder.initialize(audioDemuxer, muxer, msg.buffer);\n      console.log('audio_worker: getting encodeconfig')\n      console.log(\"audio transcoder: audioTranscoder initialize finished\");\n      console.log('initialize done');\n      this.self.postMessage({\n        type: 'initialize-done',\n        workerType : 'audio',\n        config: {\n          bit_depth: 0,\n          sample_rate: encodeconfig.sampleRate,\n          channels: encodeconfig.numberOfChannels,\n          codec_id: 'A_OPUS'\n        }\n      });\n      break;\n    case 'start-transcode':\n      //初始调用fillFrameBuffer\n      console.log('audio: transcoder is below')\n      console.log(audioTranscoder.encoder);\n      console.log(audioTranscoder.decoder);\n      console.log('audio: transcoder: case start-transcode is triggered');\n      audioTranscoder.fillDataBuffer()\n      break;\n  }\n}\n\n\nclass AudioTranscoder {\n  fillInProgress: boolean = false;\n  lock: SampleLock | undefined;\n  demuxer: MP4PullDemuxer|undefined;\n  encoder: AudioEncoder|undefined;\n  decoder: AudioDecoder|undefined;\n  overaudio: boolean = false;\n  sampleRate: number = 0;\n  channelCount: number = 0;\n  muxer: WebmMuxer|undefined;\n  async initialize(demuxer: MP4PullDemuxer, muxer: WebmMuxer, buffer: ArrayBuffer) {\n    // console.log('into audiotranscoder init')\n    this.fillInProgress = false;\n    this.lock = new SampleLock();\n    this.demuxer = demuxer;\n    this.muxer = muxer;\n    this.overaudio = false;\n\n    // console.log('audiotranscoder ready for initialize demuxer')\n    await this.demuxer.initialize(AUDIO_STREAM_TYPE, buffer);\n    console.log('audiotranscoder finish initialize demuxer')\n\n\n    this.decoder = new AudioDecoder({\n      output: this.bufferAudioData.bind(this),\n      error: e => console.error(e)\n    });\n    // console.log('before audio decode config')\n    const decodeconfig: AudioEncoderConfig = <AudioEncoderConfig>this.demuxer.getDecoderConfig();\n    // console.log('audio decodeconfig');\n    // console.log(decodeconfig)\n    //从decoder获得的sampleRate以及numberOfChannels直接赋给了this\n    this.sampleRate = decodeconfig.sampleRate;\n    this.channelCount = decodeconfig.numberOfChannels;\n\n    console.log('audio decoder below');\n    console.log(this.decoder)\n    // debugLog(decodeconfig);\n\n    console.assert(AudioDecoder.isConfigSupported(decodeconfig));\n    this.decoder.configure(decodeconfig);\n\n    //encoder读取audio data并且将其再次encode\n    this.encoder = new AudioEncoder({\n      output: this.consumeAudioData.bind(this),\n      error: e => console.error(e)\n    })\n    //当转为webm格式时，音频的config直接写死\n    const encodeconfig = {\n      codec: 'opus',\n      bitrate: 128 * 1000,\n      sampleRate: this.sampleRate,\n      numberOfChannels: this.channelCount\n    }\n    console.assert(AudioEncoder.isConfigSupported(encodeconfig));\n    this.encoder.configure(encodeconfig);\n    return encodeconfig;\n  }\n\n\n\n  // 作用是确保只有一个能进入这个过程\n  async fillDataBuffer() {\n\n    if(this.audioDataFull()){\n      console.log('audio data full');\n      return;\n    }\n    // This method is called from multiple places to ensure the buffer stays\n    // healthy. Sometimes these calls may overlap, but at any given point only\n    // one call is desired.\n    if (this.fillInProgress)\n      return;\n\n    this.fillInProgress = true;\n    // This should be this file's ONLY call to the *Internal() variant of this method.\n    // await this.fillDataBufferInternal();\n    \n    while (this.decoder!.decodeQueueSize < ENCODER_QUEUE_SIZE_MAX && \n      //返回队列中挂起的解码请求数。\n        this.encoder!.encodeQueueSize < ENCODER_QUEUE_SIZE_MAX && !this.overaudio) {\n          \n              //由demuxer来控制是否获取下一个chunk\n              // console.log('当前的encodequeuesize');\n              // console.log(this.encoder.encodeQueueSize)\n              // console.log('当前的decodequeuesize');\n              // console.log(this.decoder.decodeQueueSize)\n      let chunk = await this.demuxer!.getNextChunk();\n\n      // console.log('get chunk')\n      // console.log(chunk);\n      if(!chunk){\n        this.overaudio = true; \n      }\n      else{ \n        chunkCount++;\n        console.log('chunk data count');\n        console.log(chunkCount);\n        this.decoder!.decode(chunk);\n      }\n    }\n    // this.fillInProgress = false;\n    this.fillInProgress = false;\n\n    if(!this.overaudio && this.encoder!.encodeQueueSize === 0)\n      setTimeout(this.fillDataBuffer.bind(this), 0);\n\n\n\n\n  }\n\n  audioDataFull(){\n    return this.encoder!.encodeQueueSize >= ENCODER_QUEUE_SIZE_MAX;\n  }\n\n\n  //这一步是audioDecoder的回调，通过观察控制台输出结果，可以确定的是audio data 和 getNextChunk得到的chunk是一一对应的。\n  bufferAudioData(frame: AudioData) {\n    frameCount++;\n        //暂时去掉\n    // console.log('audio data count');\n    // console.log(framecount);\n\n    // console.log('audio frame')\n    // console.log(frame)\n    \n    debugLog(`bufferFrame(${frame.timestamp})`);\n    // frameCount ++;\n    console.log(frameCount);\n    this.encoder!.encode(frame);\n    //这里注释了，为了暂停bufferframe\n    // this.fillFrameBuffer();\n    frame.close();\n    // this.frameBuffer.push(frame);\n  }\n\n\n\n  //这是自己写的encoder的回调，完成encode的过程后会自动给主线程发送信息\n  async consumeAudioData(chunk: EncodedAudioChunk) {\n\n    const data = new ArrayBuffer(chunk.byteLength);\n    chunk.copyTo(data);\n    //这里是有插件冲突，报错：(message: any, targetOrigin: string, transfer?: Transferable[] | undefined)\n    self.postMessage({\n      type: 'audio-data',\n      timestamp: chunk.timestamp,\n      duration: chunk.duration,\n      is_key: true,\n      data\n        //@ts-ignore\n    }, [data])\n\n    await this.lock!.status;\n    this.lock!.lock();\n    rechunkCount++;\n    this.lock!.unlock();\n\n        //暂时去掉\n        console.log('rechunk count');\n        console.log(rechunkCount)\n\n    if(!this.overaudio && this.encoder!.encodeQueueSize === 0)\n        this.fillDataBuffer();\n    if(this.encoder!.encodeQueueSize === 0 && this.decoder!.decodeQueueSize === 0){\n      if(rechunkCount === 10576){\n        self.postMessage({type: 'exit'})\n        console.log('current audio')\n        console.log('post exit message to self...')\n      }\n    }\n  }\n\n}\n"],"names":[],"mappings":";;AAgBA,IAAI,UAAU,GAAG,CAAC,CAAC;AACnB,IAAI,UAAU,GAAG,CAAC,CAAC;AACnB,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,IAAI,eAA0C,CAAC;AAE/C,SAAS,GAAG,gBAAgB,CAAC,EAAA;AAC3B,IAAA,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC;AACnB,IAAA,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;AACvC,IAAA,IAAG,CAAC,eAAe;AACjB,QAAA,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;IAC1C,QAAQ,GAAG,CAAC,IAAI;AACd,QAAA,KAAK,YAAY;AACf,YAAA,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;AAE9D,YAAA,IAAI,YAAY,GAAI,IAAI,cAAc,EAAE,CAAC;AAEzC,YAAA,IAAI,KAAK,GAAG,IAAI,SAAS,EAAE,CAAC;AAG5B,YAAA,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAA;AACrD,YAAA,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,UAAU,CAAC,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;AACvF,YAAA,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAA;AACjD,YAAA,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;AACrE,YAAA,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;AAC/B,YAAA,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;AACpB,gBAAA,IAAI,EAAE,iBAAiB;AACvB,gBAAA,UAAU,EAAG,OAAO;AACpB,gBAAA,MAAM,EAAE;AACN,oBAAA,SAAS,EAAE,CAAC;oBACZ,WAAW,EAAE,YAAY,CAAC,UAAU;oBACpC,QAAQ,EAAE,YAAY,CAAC,gBAAgB;AACvC,oBAAA,QAAQ,EAAE,QAAQ;AACnB,iBAAA;AACF,aAAA,CAAC,CAAC;YACH,MAAM;AACR,QAAA,KAAK,iBAAiB;AAEpB,YAAA,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;AACzC,YAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AACrC,YAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AACrC,YAAA,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;YACpE,eAAe,CAAC,cAAc,EAAE,CAAA;YAChC,MAAM;AACT,KAAA;AACH,CAAC,CAAA;AAGD,MAAM,eAAe,CAAA;IACnB,cAAc,GAAY,KAAK,CAAC;AAChC,IAAA,IAAI,CAAyB;AAC7B,IAAA,OAAO,CAA2B;AAClC,IAAA,OAAO,CAAyB;AAChC,IAAA,OAAO,CAAyB;IAChC,SAAS,GAAY,KAAK,CAAC;IAC3B,UAAU,GAAW,CAAC,CAAC;IACvB,YAAY,GAAW,CAAC,CAAC;AACzB,IAAA,KAAK,CAAsB;AAC3B,IAAA,MAAM,UAAU,CAAC,OAAuB,EAAE,KAAgB,EAAE,MAAmB,EAAA;AAE7E,QAAA,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;AAC5B,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,EAAE,CAAC;AAC7B,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,QAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAGvB,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;AACzD,QAAA,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAA;AAGxD,QAAA,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC;YAC9B,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YACvC,KAAK,EAAE,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7B,SAAA,CAAC,CAAC;QAEH,MAAM,YAAY,GAA2C,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;AAI7F,QAAA,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC;AAC1C,QAAA,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,gBAAgB,CAAC;AAElD,QAAA,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;AACnC,QAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAGzB,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;AAC7D,QAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAGrC,QAAA,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC;YAC9B,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;YACxC,KAAK,EAAE,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7B,SAAA,CAAC,CAAA;AAEF,QAAA,MAAM,YAAY,GAAG;AACnB,YAAA,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,GAAG,GAAG,IAAI;YACnB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,gBAAgB,EAAE,IAAI,CAAC,YAAY;SACpC,CAAA;QACD,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;AAC7D,QAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AACrC,QAAA,OAAO,YAAY,CAAC;KACrB;AAKD,IAAA,MAAM,cAAc,GAAA;AAElB,QAAA,IAAG,IAAI,CAAC,aAAa,EAAE,EAAC;AACtB,YAAA,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC/B,OAAO;AACR,SAAA;QAID,IAAI,IAAI,CAAC,cAAc;YACrB,OAAO;AAET,QAAA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;AAI3B,QAAA,OAAO,IAAI,CAAC,OAAQ,CAAC,eAAe,GAAG,sBAAsB;YAEzD,IAAI,CAAC,OAAQ,CAAC,eAAe,GAAG,sBAAsB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAO7E,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,OAAQ,CAAC,YAAY,EAAE,CAAC;YAI/C,IAAG,CAAC,KAAK,EAAC;AACR,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACvB,aAAA;AACG,iBAAA;AACF,gBAAA,UAAU,EAAE,CAAC;AACb,gBAAA,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAChC,gBAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACxB,gBAAA,IAAI,CAAC,OAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7B,aAAA;AACF,SAAA;AAED,QAAA,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAE5B,IAAG,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAQ,CAAC,eAAe,KAAK,CAAC;AACvD,YAAA,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KAKjD;IAED,aAAa,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,OAAQ,CAAC,eAAe,IAAI,sBAAsB,CAAC;KAChE;AAID,IAAA,eAAe,CAAC,KAAgB,EAAA;AAC9B,QAAA,UAAU,EAAE,CAAC;AAQb,QAAA,QAAQ,CAAC,CAAe,YAAA,EAAA,KAAK,CAAC,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC;AAE5C,QAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACxB,QAAA,IAAI,CAAC,OAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAG5B,KAAK,CAAC,KAAK,EAAE,CAAC;KAEf;IAKD,MAAM,gBAAgB,CAAC,KAAwB,EAAA;QAE7C,MAAM,IAAI,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC/C,QAAA,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEnB,IAAI,CAAC,WAAW,CAAC;AACf,YAAA,IAAI,EAAE,YAAY;YAClB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ;AACxB,YAAA,MAAM,EAAE,IAAI;YACZ,IAAI;AAEL,SAAA,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;AAEV,QAAA,MAAM,IAAI,CAAC,IAAK,CAAC,MAAM,CAAC;AACxB,QAAA,IAAI,CAAC,IAAK,CAAC,IAAI,EAAE,CAAC;AAClB,QAAA,YAAY,EAAE,CAAC;AACf,QAAA,IAAI,CAAC,IAAK,CAAC,MAAM,EAAE,CAAC;AAGhB,QAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAC7B,QAAA,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAE7B,IAAG,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAQ,CAAC,eAAe,KAAK,CAAC;YACrD,IAAI,CAAC,cAAc,EAAE,CAAC;AAC1B,QAAA,IAAG,IAAI,CAAC,OAAQ,CAAC,eAAe,KAAK,CAAC,IAAI,IAAI,CAAC,OAAQ,CAAC,eAAe,KAAK,CAAC,EAAC;YAC5E,IAAG,YAAY,KAAK,KAAK,EAAC;gBACxB,IAAI,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAA;AAChC,gBAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;AAC5B,gBAAA,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;AAC5C,aAAA;AACF,SAAA;KACF;AAEF"}