{"version":3,"file":"demux_decode_worker-b8846229.js","sources":["../src/worker/demux_decode_worker.ts"],"sourcesContent":["// import { start } from 'repl';\n\n\n// importScripts('./mp4_demuxer.js');\n\n\n// importScripts('./webm-writer.js')\n\n// let lastMediaTimeCapturePoint = 0;\n// let lastMediaTimeSecs = 0;\n// let moduleLoadedResolver = null;\n// let webmLoadedResolver = null;\n// let videoTranscoder = null;\n// let frameCount = 0;\n// let playing = false;\n\n//initialize部分的判断条件，只有当它为2时，才返回initialize-done\nlet workerNum = 0;\nlet exitNum = 0;\n\n//从worker中读到的Config\nlet videoConfig: VideoEncoderConfig;\nlet audioConfig: AudioEncoderConfig;\n// let modulesReady = new Promise(resolver => (moduleLoadedResolver = resolver));\n// 不需要这一步，因为webm是以worker形式导入的。\n// let webmReady = new Promise(resolver => (webmLoadedResolver = resolver));\n\n\nconst video_Worker = new Worker(new URL(\"../worker/video_transcoder.ts\", import.meta.url), {\n    type: \"module\"\n});\nconst audio_Worker = new Worker(new URL(\"../worker/audio_transcoder.ts\", import.meta.url), {\n    type: \"module\"\n})\n\nvideo_Worker.onmessage = passdata\nvideo_Worker.onerror = er => console.error(er);\n\naudio_Worker.onmessage = passdata;\naudio_Worker.onerror = er => console.error(er);\n\n\nfunction passdata(ev: MessageEvent){\n  const msg = ev.data;\n  switch (msg.type) {\n    case 'initialize-done':\n      console.log('demux_worker:get transcoder done')\n      if(msg.workerType === 'video')\n        videoConfig = msg.config;\n      else\n        audioConfig = msg.config;\n        //这里先不加入音频\n      console.log('videoconfig')\n      console.log(videoConfig)\n      console.log(workerNum);\n      if(++workerNum === 2){\n        console.log('in demux worker')\n        console.log(videoConfig);\n        console.log(audioConfig)\n      self.postMessage({\n        type: 'initialize-done',\n        webm_stats_interval: 1000,\n        webm_metadata: {\n          max_cluster_duration: BigInt(2000000000),\n          video: videoConfig,\n          audio: audioConfig\n        }});\n      }\n      break;\n    case 'error':\n      self.postMessage({\n        type: 'error',\n        err: msg.err\n      })\n      break;\n    case 'exit':\n      console.log('decode worker: get exit from a transcoder');\n      if(++exitNum == 2){\n        video_Worker.terminate();\n        audio_Worker.terminate();\n        self.postMessage(msg);\n      }\n      break;\n    case 'video-data':\n      //这里是有插件冲突，报错：(message: any, targetOrigin: string, transfer?: Transferable[] | undefined)\n      //@ts-ignore\n      self.postMessage(msg, [msg.data])\n      break;\n    case 'audio-data':\n      //@ts-ignore\n      self.postMessage(msg, [msg.data])\n      break;\n  }\n\n}\n\n//这里一整块的作用是创建videotranscoder，由于下面已经再worker中尝试创建，所以这里先注释了\n// (async () => {\n//   let videoImport = import('./video_transcoder.js');\n//   videoImport.then((vi) =>{\n//     videoTranscoder = new vi.VideoTranscoder();\n//     console.log(videoTranscoder);\n//     moduleLoadedResolver();\n//     moduleLoadedResolver = null;\n//     console.log('worker imported')\n//   });\n  \n// })();\n\nself.addEventListener('message', async function(e: MessageEvent) {\n  // await modulesReady;\n  const msg = e.data;\n  switch (msg.type) {\n    case 'initialize':\n      //在transcoder中执行initialize\n      video_Worker.postMessage({\n        type: 'initialize',\n        buffer: msg.buffer\n      });\n      audio_Worker.postMessage({\n        type: 'initialize',\n        buffer: msg.buffer\n      })\n      // let videoReady = videoTranscoder.initialize(videoDemuxer, e.data.canvas, muxer);\n      // await videoReady;\n      console.log(\"demux_worker: videoTranscoder initialize begin\")\n      console.log(\"demux_worker: audioTranscoder initialize begin\")\n      // console.log('initialize done');\n      // this.postMessage({command: 'initialize-done'})\n      break;\n    case 'start-transcode':\n      //这里目前只有一个video_worker，还有一个audio_worker等待添加\n      video_Worker.postMessage({\n        type: 'start-transcode'\n      });\n      audio_Worker.postMessage({\n        type: 'start-transcode'\n      })\n      break;\n      //这里总是会监听到metamask的信息，很怪？？？\n      //这里先整体注释了\n    // default:\n    //   console.log('current demux_decode_worker')\n    //   console.log(e.data)\n    //   console.error(`Worker bad message: ${e.data}`);\n    //   break;\n  }\n})\n\nexport default 0;\n"],"names":[],"mappings":"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"}