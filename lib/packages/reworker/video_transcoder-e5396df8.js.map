{"version":3,"file":"video_transcoder-e5396df8.js","sources":["../src/worker/video_transcoder.ts"],"sourcesContent":["// import { VIDEO_STREAM_TYPE } from \"./pull_demuxer_base.js\";\n// import { MP4PullDemuxer } from \"../mp4_pull_demuxer.js\";\n// import { max_video_config } from \"./resolution\";\n\nimport { MP4PullDemuxer } from '../tool/mp4_demuxer';\nimport { WebmMuxer } from '../tool/webm_muxer';\nimport { SampleLock } from '../tool/SampleLock'\n\nimport { DECODER_QUEUE_SIZE_MAX, VIDEO_STREAM_TYPE, debugLog } from '../tool/type'\n\n//importScripts在ts环境中不适用，因此先注释，看看会出什么问题再解决\n// self.importScripts('../external-js/mp4box.all.min.js');\n\n// const VIDEO_STREAM_TYPE = 1;\n// const AUDIO_STREAM_TYPE = 0;\n// const DECODER_QUEUE_SIZE_MAX = 5;\n// const ENABLE_DEBUG_LOGGING = false;\nvar framecount = 0;\nvar chunkCount = 0;\n\nlet videoTranscoder: VideoTranscoder|null = null;\n\n\n\nconst vp9_params = {\n  profile: 0,\n  level: 10,\n  bit_depth: 8,\n  // chroma_subsampling: chroma_el.value ? 2 : 1\n  chroma_subsampling: 1\n};\n\nonmessage = async function (e) {\n  const msg = e.data;\n  if(videoTranscoder === null)\n    videoTranscoder = new VideoTranscoder();\n  switch (msg.type) {\n    case 'initialize':\n      console.log('video transcoder: case initialize is triggered');\n      let videoDemuxer =  new MP4PullDemuxer();\n      // console.log('finish videoDemuxer')\n      let muxer = new WebmMuxer();\n      // console.log('finish videoWebmMuxer')\n      //这里可能要重写\n      //将提取出几个config的方法单独挪出来，直接将config传入initialize\n      const encodeconfig = await videoTranscoder.initialize(videoDemuxer, muxer, msg.buffer);\n      // console.log(\"video transcoder: Transcoder initialize finished\");\n      // console.log('video transcoder: initialize done');\n      this.self.postMessage({\n        type: 'initialize-done',\n        workerType : 'video',\n        config: {\n          width: encodeconfig?.width,\n          height: encodeconfig?.height,\n          frame_rate: encodeconfig?.framerate,\n          // codec_id: encodeconfig.codec,\n          codec_id: 'V_VP9',\n          ...vp9_params\n        }\n      });\n      break;\n    case 'start-transcode':\n      //初始调用fillFrameBuffer\n      console.log('video transcoder is below')\n      console.log(videoTranscoder.encoder);\n      console.log(videoTranscoder.decoder);\n      console.log('video transcoder: case start-transcode is triggered');\n      videoTranscoder.fillFrameBuffer()\n      break;\n  }\n}\n\n\n\n\n// Controls demuxing and decoding of the video track, as well as rendering\n// VideoFrames to canvas. Maintains a buffer of DECODER_QUEUE_SIZE_MAX\n// decoded frames for future rendering.\n//控制了解复用和对视频轨道的解码\nclass VideoTranscoder {\n  encoder: VideoEncoder|undefined;\n  decoder: VideoDecoder|undefined;\n  lock: SampleLock|undefined;\n  over: boolean = false;\n  demuxer: MP4PullDemuxer|undefined;\n  muxer: WebmMuxer|undefined;\n  fillInProgress: boolean = false;\n  \n  // init_resolver: null|undefined;\n  async initialize(demuxer: MP4PullDemuxer, muxer: WebmMuxer, buffer: ArrayBuffer) {\n    // console.log('into videotranscoder init')\n    //frameBuffer其实也已经没有用了，这里注释\n    // this.frameBuffer = [];\n    //是否在fillinprogress，默认是false\n    this.fillInProgress = false;\n    // this.addProcess = false;\n\n    this.demuxer = demuxer;\n    this.muxer = muxer;\n    this.over = false;\n\n    this.lock = new SampleLock();\n    //根据VIDEO_STREAM_TYPE进行初始化，这里进行了demuxer的初始化\n    \n    await this.demuxer?.initialize(VIDEO_STREAM_TYPE, buffer);\n    console.log('videotranscoder finish initialize demuxer')\n\n    const decodeconfig = this.demuxer?.getDecoderConfig();\n    const encodeconfig = await this.muxer?.getEncoderConfig();\n    // console.log(decodeconfig);\n    console.log('encodeconfig');\n    console.log(encodeconfig)\n\n    this.decoder = new VideoDecoder({\n      //每进来一个frame，将其缓存进frameBuffer中\n      output: this.bufferFrame.bind(this),\n      error: e => console.error(e),\n    });\n    console.assert(VideoDecoder.isConfigSupported(decodeconfig))\n    this.decoder.configure(decodeconfig);\n   \n    //init_resolver原本是用来表示是否初始化完成的过程，但是这里已经改成了转码版本，目前不需要这个过程了\n    // this.init_resolver = null;\n    // let promise = new Promise((resolver) => this.init_resolver = resolver );\n    //初始化encoder\n    this.encoder = new VideoEncoder({\n      output: this.consumeFrame.bind(this),\n      error: e => console.error(e)\n    })\n    console.log('encoder is below')\n    console.log(this.encoder)\n    console.assert(VideoEncoder.isConfigSupported(<VideoEncoderConfig>encodeconfig))\n    this.encoder.configure(<VideoEncoderConfig>encodeconfig);\n    // console.log(\"decoder & encoder configured finished\")\n    //要将相关参数返回去，这里return\n    return encodeconfig;\n    //初始化之后进行fillFrameBuffer\n    //这里先注释\n    // this.fillFrameBuffer();\n    // console.log(\"finish fillFrameBuffer\")\n    // return promise;\n  }\n\n\n\n  //填充framebuffer\n  async fillFrameBuffer() {\n    if (this.frameBufferFull()) {\n      console.log('video frame buffer full');\n\n      setTimeout(this.fillFrameBuffer.bind(this), 20);\n    }\n    \n\n    // This method can be called from multiple places and we some may already\n    // be awaiting a demuxer read (only one read allowed at a time).\n    //这个方法可以从多个地方调用，有时可能已经在等待demuxer读取（一次只允许一个读取）。\n    //fillinprogress是控制并发的\n    if (this.fillInProgress) {\n      return ;\n    }\n    this.fillInProgress = true;\n\n    //当已经buffer的frame和decoded序列长度都小于DECODER_QUEUE_SIZE_MAX（3）时，就会进行getNextChunk，并且decode\n    while ((<number>(this.decoder?.decodeQueueSize) < DECODER_QUEUE_SIZE_MAX) && \n      //返回队列中挂起的解码请求数。\n        (<number>(this.encoder?.encodeQueueSize) < DECODER_QUEUE_SIZE_MAX) && !this.over) {\n          \n              //由demuxer来控制是否获取下一个chunk\n              // console.log('当前的encodequeuesize');\n              // console.log(this.encoder.encodeQueueSize)\n              // console.log('当前的decodequeuesize');\n              // console.log(this.decoder.decodeQueueSize)\n      let chunk = await this.demuxer?.getNextChunk();\n\n      console.log('get chunk')\n      console.log(chunk);\n      if(!chunk){\n        this.over = true; \n      }\n      else{ \n        chunkCount++;\n        this.decoder?.decode(chunk);\n      }\n    }\n    this.fillInProgress = false;\n\n    \n\n    // Give decoder a chance to work, see if we saturated the pipeline.\n    //这里是fillframebuffer自己调用自己，也先被我注释了\n    if(!this.over && this.encoder?.encodeQueueSize === 0)\n      setTimeout(this.fillFrameBuffer.bind(this), 0);\n  }\n\n  //判断frame是否满\n  frameBufferFull() {\n    return ((<number>this.encoder?.encodeQueueSize) >= DECODER_QUEUE_SIZE_MAX);\n  }\n\n  //将frame buffer起来\n  bufferFrame(frame: VideoFrame) {\n    debugLog(`bufferFrame(${frame.timestamp})`);\n    this.encoder?.encode(frame);\n    //这里注释了，为了暂停bufferframe\n    // this.fillFrameBuffer();\n    frame.close();\n    // this.frameBuffer.push(frame);\n  }\n\n  //有没有什么办法记录最后一个frame呢\n  async consumeFrame(chunk: EncodedVideoChunk) {\n    //这个chunk的duration属性为0，但是也许可以通过timestamp计算出来？不知道会不会有影响？\n    // console.log(chunk);\n    const data = new ArrayBuffer(chunk.byteLength);\n    chunk.copyTo(data);\n    //这里是有插件冲突，报错：(message: any, targetOrigin: string, transfer?: Transferable[] | undefined)\n    self.postMessage({\n      //这里要注意，后面会用type来替代\n      type: 'video-data',\n      timestamp: chunk.timestamp,\n      duration: chunk.duration,\n      is_key: chunk.type === 'key',\n      data\n      //@ts-ignore\n    }, [data]);\n\n    \n    await this.lock?.status;\n    this.lock?.lock();\n    framecount++;\n    this.lock?.unlock();\n\n    console.log('video framecount')\n    console.log(framecount);\n    \n    //调用的主要地方，consumeFrame处\n    if(!this.over && this.encoder?.encodeQueueSize === 0)\n        this.fillFrameBuffer();\n    \n    if(this.encoder?.encodeQueueSize === 0 && this.decoder?.decodeQueueSize === 0 && this.over){\n      // console.log(framecount)\n      // console.log('video framecount');\n      // console.log(chunkCount);\n      // console.log('video chunkCount');\n      //根据bbb视频多次实验，发现解码出来的帧数总是会比总帧数少1\n      if(framecount === chunkCount-1){\n        console.log('current video')\n        console.log(framecount)\n        console.log(chunkCount)\n        console.log('post exit message to self...')\n        console.log(framecount)\n        self.postMessage({type: 'exit'})\n      }\n    }\n  }\n\n}\n"],"names":[],"mappings":"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"}